{
  "projectName": "YokiChessEngine",
  "description": "A standalone chess engine for integration with a React-based chess web app and developer tools.",
  "language": "C++17",
  "type": "Executable (CLI and IDE-compatible)",
  "entryPoint": "test.cpp",
  "output": "results.txt",
  "engine": {
    "location": "engine/Engine.h, engine/Engine.cpp",
    "description": "Implements core chess engine logic, including move generation, evaluation, and search.",
    "api": {
      "set_position": {
        "description": "Sets the board state using FEN.",
        "input": "FEN string",
        "output": "void"
      },
      "search_best_move": {
        "description": "Finds the best move using search algorithm (e.g., alpha-beta).",
        "input": "search depth (int)",
        "output": "best move (UCI string, e.g. 'e2e4')"
      }
    }
  },
  "developerInterface": {
    "file": "test.cpp",
    "description": "Hardcoded testing interface. Developers write tests here and control engine input/output.",
    "outputFile": "results.txt",
    "example": {
      "input": "engine.set_position('<FEN>'); engine.search_best_move(4);",
      "output": "results.txt <- Best move: e2e4"
    }
  },
  "cliIntegration": {
    "description": "Later stage: expose as CLI binary with simple protocol or UCI.",
    "exampleUsage": "exec('./yokichess go depth 4', (err, stdout) => { parse(stdout); });"
  },
  "tooling": {
    "buildSystem": "CMake",
    "compilerStandard": "C++17",
    "supportedIDEs": ["CLion", "VSCode", "Visual Studio"]
  },
  "goals": [
    "Run engine and tests in IDE",
    "Log output to results.txt",
    "Prepare for integration with React frontend and backend",
    "Eventually support CLI or UCI interface for external tools"
  ],
  "status": "In development",
  "nextSteps": [
    "Implement Engine class with set_position and search_best_move",
    "Set up test.cpp to call Engine and write to results.txt",
    "Write basic FEN parser and move generator"
  ]
}